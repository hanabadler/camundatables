stage 0
======================================================
rule "function BC016 24 hours more than X deposits"
when
  to_string($message.action) == "reloadcard" and  
  to_long(getResultSizeGenericQuery("5a4b974a70c99307476543d8",
  StrSubstitutor("action:reloadcard And publicToken:${PublicToken}"),"24"))> 2
then
  let risk = 20.0;
  set_field("BC016Risk ",risk);

  let currentScore  = to_double($message.totalscore);
  set_field("totalscore", currentScore + risk);

  let lHiveartifact = StrSubstitutor("{\"dataType\": \"other\", \"data\": \"BC016  ${BC016Risk}\", \"tags\": [\"score=${BC016Risk}\",\"category=BC016Risk Risk\"]  }");
  SetJsonDataOnMessageField("hiveartifacts",lHiveartifact);
end


rule "camunda function eval Deposit amount " 
when
  to_string($message.action) == "reloadcard" or
  to_string($message.action) == "newcard"
  
then

  let url     = "";
  let dmnKey  = to_string(CamundaDMNgetLatestFunction(url , "amount", "false" ,""));

  let jsonBody = StrSubstitutor("{\"variables\" : {\"amount\" : {\"value\" : \"${amount}\", \"type\" : \"double\" }}}");
  let risk = to_double (CamundaDMNEvalFunction(jsonBody , url, dmnKey, "false", "")) ;
  set_field("amountdepositrisk",risk);

  let currentScore  = to_double($message.totalscore);
  set_field("totalscore", currentScore + risk);

  let lHiveartifact = StrSubstitutor("{\"dataType\": \"other\", \"data\": \"amountdepositrisk ${amountdepositrisk}\", \"tags\": [\"score=${amountdepositrisk}\",\"category=amountdepositrisk\"]  }");
  SetJsonDataOnMessageField("hiveartifacts",lHiveartifact);

end


rule "camunda function eval Deposit Form " 
when
  to_string($message.action) == "reloadcard" or
  to_string($message.action) == "newcard"
  
then

  let url     = "";
  let dmnKey  = to_string(CamundaDMNgetLatestFunction(url , "formofdeposit", "false" ,""));

  let jsonBody = StrSubstitutor("{\"variables\" : {\"deposit\" : {\"value\" : \"${payment_methods_type_id}\", \"type\" : \"double\" }}}");
  let risk = to_double (CamundaDMNEvalFunction(jsonBody , url, dmnKey, "false", "")) ;
  set_field("formofdepositrisk",risk);

  let currentScore  = to_double($message.totalscore);
  set_field("totalscore", currentScore + risk);

  let lHiveartifact = StrSubstitutor("{\"dataType\": \"other\", \"data\": \"formofdepositrisk ${formofdepositrisk}\", \"tags\": [\"score=${formofdepositrisk}\",\"category=formofdepositrisk\"]  }");
  SetJsonDataOnMessageField("hiveartifacts",lHiveartifact);

end



rule "camunda function eval Deposit Hour Risk" 
when
  to_string($message.action) == "newcustomer" or 
  to_string($message.action) == "newcard" or
  to_string($message.action) == "reloadcard"
then

  let url     = "";
  let dmnKey  = to_string(CamundaDMNgetLatestFunction(url , "when", "false" ,""));

  let jsonBody = StrSubstitutor("{\"variables\" : {\"when\" : {\"value\" : \"${openhour}\", \"type\" : \"double\" }}}");
  let risk = to_double (CamundaDMNEvalFunction(jsonBody , url, dmnKey, "false", "")) ;
  set_field("whenrisk",risk);

  let currentScore  = to_double($message.totalscore);
  set_field("totalscore", currentScore + risk);

  let lHiveartifact = StrSubstitutor("{\"dataType\": \"other\", \"data\": \"when ${whenrisk}\", \"tags\": [\"score=${whenrisk}\",\"category=When Risk\"]  }");
  SetJsonDataOnMessageField("hiveartifacts",lHiveartifact);

end









stage 1
===================================================================================

rule "reload card function send to hive message finaltotalscore  > 100"
when
  to_long($message.totalscore) > to_long(100) and to_string($message.action) == "reloadcard" 
then

  set_field("functionsendtohivetesthere","function send to hive test");  
  let url = ""; 
  let bearer = "";
  let jsonBody = "";
  let alertmeta="reload card  Risk Alert test,Alert Created due to several risk factors test,Risk Rules Alert,2,hiveartifacts,3";
  let WithDebug = "false";
  SendToHiveFunction(url, bearer, jsonBody, alertmeta, WithDebug) ;
end




rule "newcard function send to hive message finaltotalscore  > 100"
when
  to_long($message.totalscore) > to_long(100) and to_string($message.action) == "newcard" 
then
  set_field("functionsendtohivetesthere","function send to hive test");  
  let url = ""; 
  let bearer = "";
  let jsonBody = "";
  let alertmeta="card Sale  Risk Alert test,Alert Created due to several risk factors test,Risk Rules Alert,2,hiveartifacts,3";
  let WithDebug = "false";
  SendToHiveFunction(url, bearer, jsonBody, alertmeta, WithDebug) ;
end

